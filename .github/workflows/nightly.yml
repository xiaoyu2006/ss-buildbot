name: nightly

on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'

env:
  CARGO_TERM_COLOR: always


jobs:
  compile:
    name: Compile
    runs-on: 'macos-10.15'
    steps:

    - name: Download Shadowsocks-Rust latest tag
      shell: bash
      working-directory: ${{ runner.workspace }}
      # https://stackoverflow.com/questions/29780641/how-to-clone-latest-tag-in-a-git-repo
      run: |
        tag=$(git ls-remote --tags --exit-code --refs "https://github.com/shadowsocks/shadowsocks-rust.git" | sed -E 's/^[[:xdigit:]]+[[:space:]]+refs\/tags\/(.+)/\1/g' | tail -n1)
        echo "ss_tag=$tag" >> $GITHUB_ENV
        git clone --branch "$tag" --depth 1 --shallow-submodules --recurse-submodules "https://github.com/shadowsocks/shadowsocks-rust.git"
  
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ${{ runner.workspace }}/shadowsocks-rust/target
        key: ${{ runner.os }}-cargo-${{ env.ss_tag }}

    - name: Build release
      shell: bash
      working-directory: ${{ runner.workspace }}
      run: |
        sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
        rustup toolchain install nightly
        # Usage: build_target [target_platform] [save_destination]
        function build_target {
          target=$1
          save_to=$2
          rustup target add $target --toolchain nightly
          rustup update
          pushd shadowsocks-rust
          cargo +nightly build --bin sslocal --release --target $target
          popd
          cp shadowsocks-rust/target/$target/release/sslocal $save_to
        }
        build_target x86_64-apple-darwin ./x86_64
        build_target aarch64-apple-darwin ./arm64
        lipo -create -output sslocal x86_64 arm64

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      # May have already created.
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.ss_tag }}
        release_name: Release ${{ env.ss_tag }}
        draft: false
        prerelease: false
        
    - name: Upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ runner.workspace }}/sslocal
        asset_name: sslocal
        asset_content_type: application/x-mach-binary

